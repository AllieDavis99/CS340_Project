[
             <a href="customers.hbs">Customers</a>
            | <a href="bookings.hbs">Bookings</a>
            | <a href="floors.hbs">Floors</a>
            | <a href="rooms.hbs">Rooms</a>
            | <a href="roomtypes.hbs">Room Types</a>
            | <a href="roomTypesPerfloor.hbs">Room Types Per Floor</a>
            ]

<table id="room-per-floor-table">
    <thead>
        <caption>Room Types Per Floor</caption>
        <tr>

            <th>ID</th>
            <th>Floor</th>
            <th>Room Type</th>
        </tr>
    </thead>

    <tbody>
        {{#each data}}
        <tr>
            <td>{{this.id}}</td>
            <td>{{this.floor_id}}</td>
            <td>{{this.room_type_name}}</td>
            <td><button id="delete-room-to-floor" onClick="deleteRoomPerFloor({{this.id}})">Delete</button></td>
        </tr>
        {{/each}}
    </tbody>
</table>

<script>
    function deleteRoomPerFloor(roomPerFloorID) {
        let data = {
            id: roomPerFloorID
        };

        var xhttp = new XMLHttpRequest();
        xhttp.open("DELETE", "/delete-room-per-floor-ajax", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        xhttp.onreadystatechange = () => {
            if (xhttp.readyState == 4 && xhttp.status == 204) {

                deleteRow(roomPerFloorID);

            }
            else if (xhttp.readyState == 4 && xhttp.status != 204) {
                console.log("There was an error with the input.")
            }
        }     // Send the request and wait for the response
        xhttp.send(JSON.stringify(data));
    }

    function deleteRow(roomPerFloorID) {
        let table = document.getElementById("room-per-floor-table");
        for (let i = 0, row; row = table.rows[i]; i++) {
            if (table.rows[i].getAttribute("data-value") == roomPerFloorID) {
                table.deleteRow(i);
                break;
            }
        }
    };
    </script>

<h1>Add Relationship:</h1>
<form id="addRoomTypePerFloor" action="/roomTypesPerfloor.hbs" method="post">

    <select name="floor_id" id="floor_id">
        <option value="">Select a floor</option>
        {{#each floors}}
        <option value="{{this.id}}">{{this.id}}</option>
        {{/each}}
    </select>

    <select name="room_type_id" id="room_type_id">
        <option value="">Select a Room Type</option>
        {{#each room_types}}
        <option value="{{this.id}}">{{this.type_name}}</option>
        {{/each}}
    </select>

    <div class="form-group">
        <input class="btn" type="submit" id="addRoomTypePerFloor" value="Add">
    </div>
</form>

<h2>Updating a Relationship</h2>
<form id="update-relationship">
    <select name="input-name" id="mySelect">
        <option value="test">Select an ID</option>
        {{#each data}}
        <option value="{{this.id}}">{{this.id}}</option>
        {{/each}}
    </select>

    <select name="floor_id_update" id="floor_id_update">
        <option value="">Select a floor</option>
        {{#each floors}}
        <option value="{{this.id}}">{{this.id}}</option>
        {{/each}}
    </select>

    <select name="room_type_id_update" id="room_type_id_update">
        <option value="">Select a Room Type</option>
        {{#each room_types}}
        <option value="{{this.id}}">{{this.type_name}}</option>
        {{/each}}
    </select>

    <input type="submit">
</form>

<script>
    let updateCustomerForm = document.getElementById('update-relationship');

    // Modify the objects we need
    updateCustomerForm.addEventListener("submit", function (e) {
        // Prevent the form from submitting
        e.preventDefault();

        // Get form fields we need to get data from
        let inputID = document.getElementById("mySelect");
        let inputFloor = document.getElementById("floor_id_update");
        let inputRoomType = document.getElementById("room_type_id_update");

        // Get the values from the form fields
        let IDValue = inputID.value;
        let floorValue = inputFloor.value;
        let roomTypeValue = inputRoomType.value;

        // Put our data we want to send in a javascript object
        let data = {
            id: IDValue,
            floor: floorValue,
            roomType: roomTypeValue
        }

        // Setup our AJAX request
        var xhttp = new XMLHttpRequest();
        xhttp.open("PUT", "/put-relationship-ajax", true);
        xhttp.setRequestHeader("Content-type", "application/json");

        // Tell our AJAX request how to resolve
        xhttp.onreadystatechange = () => {
            if (xhttp.readyState == 4 && xhttp.status == 200) {

                // Add the new data to the table
                updateRow(xhttp.response, IDValue);

            }
            else if (xhttp.readyState == 4 && xhttp.status != 200) {
                console.log("There was an error with the input.")
            }
        }

        // Send the request and wait for the response
        xhttp.send(JSON.stringify(data));

    })


    function updateRow(data, relationshipID) {
        let parsedData = JSON.parse(data);

        let table = document.getElementById("room-per-floor-table");

        for (let i = 0, row; row = table.rows[i]; i++) {
            //iterate through rows
            //rows would be accessed using the "row" variable assigned in the for loop
            if (table.rows[i].getAttribute("data-value") == relationshipID) {

                // Get the location of the row where we found the matching person ID
                let updateRowIndex = table.getElementsByTagName("tr")[i];

                // Get td of updated values
                let floor_html = updateRowIndex.getElementsByTagName("td")[2];
                let room_type_html = updateRowIndex.getElementsByTagName("td")[3];

                // Reassign homeworld to our value we updated to
                floor_html.innerHTML = parsedData[0].floor_id;
                room_type_html.innerHTML = parsedData[0].room_type_id;
            }
        }
    }
</script>